***************
*** 55,60 ****
  		encodeResponse,
  		append(options, httptransport.ServerBefore(opentracing.FromHTTPRequest(tracer, "GET /catalogue/size", logger)))...,
  	))
  	r.Methods("GET").Path("/catalogue/{id}").Handler(httptransport.NewServer(
  		ctx,
  		circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
--- 55,73 ----
  		encodeResponse,
  		append(options, httptransport.ServerBefore(opentracing.FromHTTPRequest(tracer, "GET /catalogue/size", logger)))...,
  	))
+ 	r.Methods("GET").Path("/catalogue/sock").Handler(httptransport.NewServer(
+ 		ctx,
+ 		circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
+ 			Name:    "GetId",
+ 			Timeout: 30 * time.Second,
+ 			ReadyToTrip: func(counts gobreaker.Counts) bool {
+ 				return false
+ 			},
+ 		}))(e.GetIdEndpoint),
+ 		decodeGetIdRequest,
+ 		encodeGetResponse, // special case, this one can have an error
+ 		append(options, httptransport.ServerBefore(opentracing.FromHTTPRequest(tracer, "GET /catalogue/sock", logger)))...,
+ 	))
  	r.Methods("GET").Path("/catalogue/{id}").Handler(httptransport.NewServer(
  		ctx,
  		circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
***************
*** 151,156 ****
  	}, nil
  }
  
  func decodeGetRequest(_ context.Context, r *http.Request) (interface{}, error) {
  	return getRequest{
  		ID: mux.Vars(r)["id"],
--- 164,175 ----
  	}, nil
  }
  
+ func decodeGetIdRequest(_ context.Context, r *http.Request) (interface{}, error) {
+ 	return getRequest{
+ 		ID: r.URL.Query().Get("id"),
+ 	}, nil
+ }
+ 
  func decodeGetRequest(_ context.Context, r *http.Request) (interface{}, error) {
  	return getRequest{
  		ID: mux.Vars(r)["id"],
